/* -*- c -*-
Copyright (c) 2008
Lawrence Livermore National Security, LLC. 

Produced at the Lawrence Livermore National Laboratory. 
Written by Martin Schulz, schulzm@llnl.gov.
LLNL-CODE-402774,
All rights reserved.

This file is part of P^nMPI. 

Please also read the file "LICENSE" included in this package for 
Our Notice and GNU Lesser General Public License.

This program is free software; you can redistribute it and/or 
modify it under the terms of the GNU General Public License 
(as published by the Free Software Foundation) version 2.1 
dated February 1999.

This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY 
OF MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
terms and conditions of the GNU General Public License for more 
details.

You should have received a copy of the GNU Lesser General Public 
License along with this program; if not, write to the 

Free Software Foundation, Inc., 
59 Temple Place, Suite 330, 
Boston, MA 02111-1307 USA
*/

#ifndef PNMPI_CONFIG_H
#define PNMPI_CONFIG_H

/* Built with Fortran support. */
#define PNMPI_HAVE_FORTRAN @CMAKE_Fortran_COMPILER_WORKS@

/* Built with Adept Utils. */
#define PNMPI_HAVE_ADEPT_UTILS @PnMPI_USE_adept_utils@

/* Built with BFD support. */
#cmakedefine PNMPI_HAVE_BFD 1

/* Built with new BFD API. */
#cmakedefine PNMPI_NEW_BFD_API 1

/* Locations of PnMPI directories in the install tree */
#define PNMPI_INSTALL_PREFIX       "@CMAKE_INSTALL_PREFIX@"
#define PNMPI_INCLUDE_DIR          "@CMAKE_INSTALL_PREFIX@/include"
#define PNMPI_LIBRARY_DIR          "@CMAKE_INSTALL_PREFIX@/lib"
#define PNMPI_MODULES_DIR          "@CMAKE_INSTALL_PREFIX@/lib/pnmpi-modules"

/* PnMPI version information -- numerical and a version string. */
#define PNMPI_MAJOR_VERSION @PNMPI_MAJOR_VERSION@
#define PNMPI_MINOR_VERSION @PNMPI_MINOR_VERSION@
#define PNMPI_PATCH_VERSION @PNMPI_PATCH_VERSION@
#define PNMPI_VERSION       "@PNMPI_VERSION@"

/* define the array size of fortran MPI_Status, TODO: replace with call to fortran snippet  */
#ifdef MPI_STATUS_SIZE 
  /* many mpi implementations provide the value in C. The standard states "Fortran only" */
  #define PNMPI_F_STATUS_SIZE MPI_STATUS_SIZE
#else  
  /* here some fortran code should be called to get the actual value */
  #define PNMPI_F_STATUS_SIZE 6
#endif

/* Define if mpi.h has MPI_Status_c2f() and MPI_Status_f2c() */
#cmakedefine HAVE_MPI_STATUS_C2F 1

/* Define if mpi.h has MPI_STATUS_IGNORE */
#cmakedefine HAVE_MPI_STATUS_IGNORE 1

/* Define if mpi.h has MPI_STATUSES_IGNORE */
#cmakedefine HAVE_MPI_STATUSES_IGNORE 1

/* Define if mpi.h has MPI_F_STATUS_IGNORE */
#cmakedefine HAVE_MPI_F_STATUS_IGNORE 1

/* Define if mpi.h has MPI_F_STATUSES_IGNORE */
#cmakedefine HAVE_MPI_F_STATUSES_IGNORE 1

/* Define if mpi.h has working MPI_Init_thread (Fortran)*/
#cmakedefine HAVE_MPI_INIT_THREAD_Fortran 1

/* Define if mpi.h has working MPI_Init_thread (C)*/
#cmakedefine HAVE_MPI_INIT_THREAD_C 1

/* Define if mpi.h has MPI3 const arguments */
#cmakedefine HAVE_MPI3_CONST_ARGS 1

/* Define if pthreads are available */
#cmakedefine PNMPI_HAVE_PTHREADS 1

/* Define if PMPI_Type_create_indexed_block is available - fix for MVAPICH1 issue */
#cmakedefine HAVE_PMPI_TYPE_CREATE_INDEXED_BLOCK 1

#ifndef HAVE_PMPI_TYPE_CREATE_INDEXED_BLOCK
#define PNMPI_MVAPICH1FIX 1
#endif


/* jfm Modification (ELP AP THREAD SAFETY) BEGIN */
#cmakedefine PNMPI_ENABLE_THREAD_SAFETY 1
/* jfm Modification (ELP AP THREAD SAFETY) END */

#endif // PNMPI_CONFIG_H
